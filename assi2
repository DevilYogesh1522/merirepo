import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import random
import matplotlib.pyplot as plt

//for Online :
//mnist = tf.keras.datasets.mnist # Importing MNIST dataset 
//(x_train, y_train), (x_test, y_test) = mnist.load_data() # Splitting it into training and testing 


// for offline:
train_data="mnist-jpg/train"
test_data="mnist-jpg/test"


image_generator=ImageDataGenerator(rescale=1.0/255)
train_batch=10000
test_batch=5000

training_data=image_generator.flow_from_directory(
train_data,
target_size=(28,28),
batch_size=train_batch,
color_mode="grayscale",
class_mode="categorical"

)

testing_data=image_generator.flow_from_directory(
test_data,
target_size=(28,28),
batch_size=test_batch,
color_mode="grayscale",
class_mode="categorical"

)


x_train,y_train=training_data[0]
x_test,y_test=testing_data[0]




print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)



from tensorflow.keras.layers import Input
model=keras.Sequential([
    Input(shape=(28,28)),
    keras.layers.Flatten(),
    keras.layers.Dense(128,activation="relu"),
    keras.layers.Dense(10,activation="softmax")
    
    
])



model.summary()




model.compile(
optimizer="sgd",
    loss="categorical_crossentropy",
    metrics=["accuracy"]

)




history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10,batch_size=10)





test_loss,test_accu=model.evaluate(x_test,y_test)
print("loss=%.3f"%test_loss),
print("accuracy=%.3f"%test_accu)
n=random.randint(0,1000) 
plt.imshow(x_test[n])
print("actual")
plt.show()
x_train 
x_test 
predicted_value=model.predict(x_test) 
plt.imshow(x_test[n])
print("predicted")
plt.show()



plt.plot(history.history["loss"])
plt.plot(history.history["val_loss"])
plt.title("Loss")
plt.xlabel("epoch")
plt.ylabel("data")

plt.legend(["test","validation"],loc="upper right")



plt.plot(history.history["accuracy"])
plt.plot(history.history["val_accuracy"])
plt.title("accuracy")
plt.xlabel("epoch")
plt.ylabel("data")

plt.legend(["test","validation"],loc="upper right")
