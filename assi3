Assignment No: 3
Build the Image classification model by dividing the model into following 4 stages:
a. Loading and preprocessing the image data
b. Defining the model’s architecture
c. Training the model
d. Estimating the model’s performance


**************** Import necessary pacakges***************
import numpy as np
import pandas as pd
import random
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Conv2D, Dense, MaxPooling2D
from tensorflow.keras.optimizers import SGD


*********Loading and preprocessing the image data**********
train_data="mnist-jpg/train"
test_data="mnist-jpg/test"

image_generator= ImageDataGenerator(rescale=0.1/255)



training_data=image_generator.flow_from_directory(
train_data,
target_size=(28,28),
batch_size=train_batch,
class_mode="categorical",
color_mode="grayscale"

)


testing_data=image_generator.flow_from_directory(
test_data,
target_size=(28,28),
batch_size=test_batch,
class_mode="categorical",
color_mode="grayscale"

)




x_train,y_train=training_data[0]
x_test,y_test=testing_data[0]


**************Defining the model’s architecture*********************
model = Sequential([
 Input(shape=(28,28)),
 Conv2D(32, (3, 3), activation="relu"),
 MaxPooling2D((2, 2)),
 Flatten(),
 Dense(100, activation="relu"),
 Dense(10, activation="softmax")
])

optimizer = SGD(learning_rate=0.01, momentum=0.9)
model.compile(
 optimizer=optimizer, 
 loss="categorical_crossentropy", 
 metrics=["accuracy"]
)
model.summary()
model.fit(X_train, y_train, epochs=10, batch_size=32)

***************Training the model********************

import matplotlib.pyplot as plt

def plot_digit(image, digit, plt, i):
    plt.subplot(4, 5, i + 1)    # Assuming you want a grid of 4x5 for 20 images
    plt.imshow(image, cmap='gray')
    plt.title(f"Pred: {digit}")
    plt.axis('off')

# Your main loop
for i in range(20):
    index = random.choice(range(len(x_test)))
    image = x_test[index].squeeze()
    digit = np.argmax(model.predict(image.reshape(1, 28, 28, 1))[0], axis=-1)
    plot_digit(image, digit, plt, i)

plt.tight_layout()
plt.show()

*****************Estimating the model’s performance************

predictions = np.argmax(model.predict(X_test), axis=-1)
accuracy_score(y_test, predictions)
n=random.randint(0,9999)
plt.imshow(X_test[n])
plt.show()
predicted_value=model.predict(X_test)
print("Handwritten number in the image is= %d" %np.argmax(predicted_value[n]))
score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0]) #Test loss: 0.0296396646054
print('Test accuracy:', score[1])

